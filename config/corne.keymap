/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBERS 1
#define SYMBOLS 2
#define FUNCTIONS 3

// combos
// Q + SPC = `
// Q and lt numbers tab equals left ctrl `


/ {
        behaviors {
                hrm: home_row_mod {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <280>;
                        quick-tap-ms = <175>;
                        require-prior-idle-ms = <150>;
                        bindings = <&kp>, <&kp>;
                        // hold-trigger-key-positions = ; // TO IMPLEMENT
                        // hold-trigger-on-release;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_backtick {
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        action = <&kp GRAVE>;
                };
         };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------------------------------------------------------------
// |  |     Q     |     W     |     E     |     R     |     T     |          |     Y     |     U     |     I     |     O     |     P     |   |
// |  | LCTL_T(A) | LALT_T(S) | LGUI_T(D) | LSFT_T(F) |     G     |          |     H     | RSFT_T(J) | RGUI_T(K) | RALT_T(L) | RCTL_T(;) |   |
// |  |     Z     |     X     |     C     |     V     |     B     |          |     N     |     M     |     ,     |     .     |     /     |   |
//                            | LT(2,ESC) | LT(1,TAB) |    SPC    |          |    ENT    |   BSPC    | LT(#, ...)|
                        bindings = <
   &none  &kp Q         &kp W        &kp E               &kp R             &kp T            &kp Y    &kp U         &kp I           &kp O        &kp P           &none
   &none  &hrm LCTRL A  &hrm LALT S  &hrm LGUI D         &hrm LSHFT F      &kp G            &kp H    &hrm RSHFT J  &hrm RGUI K     &hrm RALT L  &mt RCTRL SEMI  &none
   &none  &kp Z         &kp X        &kp C               &kp V             &kp B            &kp N    &kp M         &kp COMMA       &kp DOT      &kp FSLH        &none
                                     &lt FUNCTIONS ESC   &lt NUMBERS TAB   &kp SPACE        &kp RET  &kp BSPC      &lt SYMBOLS DEL
                        >;
                };
                numnav_layer {
// -----------------------------------------------------------------------------------------
// |  |  ESC |      |  UP  |        |     |        |  6  |  7   |  8  |  9  |  -  |  |
// |  | HOME | LEFT | DOWN |  RIGHT | END |        |  *  |  4   |  5  |  6  |  +  |  |
// |  |      |      |      |        | SPC |        |  .  |  1   |  2  |  3  |  =  |  |
//                  |      | [hold] | SPC |        | RET | BSPC |  0  | 
                        bindings = <
   &none  &kp ESC   &trans    &kp UP    &trans     &trans         &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
   &none  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp END        &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &none
   &none  &trans    &trans    &trans    &trans     &trans         &kp KP_DOT       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_EQUAL  &none
                              &trans    &trans     &trans         &trans           &trans     &kp KP_N0
                        >;
                };

                symbols_layer {
// -----------------------------------------------------------------------------------------
// |  |  !  |  @  |  #  |  $  |  %  |        |  ^  |  &  |  *     |  (  |  )  |  |
// |  |  `  |  <  |  {  |  (  |  [  |        |  ]  |  )  |  }     |  >  |  '  |  |
// |  |     |     |     |     |     |        |  -  |  _  |        |  \  | "|" |  |
//                |     |     |     |        |     |     | [hold] |
                        bindings = <
   &none  &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTRK &kp MINUS  &kp EQUAL  &none
   &none  &kp GRAVE  &kp LT  &kp LBRC  &kp LPAR  &kp LBKT         &kp RBKT   &kp RPAR   &kp RBRC  &kp GT     &kp SQT    &none
   &none  &trans     &trans  &trans    &trans    &trans           &kp MINUS  &kp UNDER  &trans    &kp BSLH   &kp PIPE   &none
                             &trans    &trans    &trans           &trans     &trans     &trans
                        >;
                };
        };
};
